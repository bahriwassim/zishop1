const testFrontendFunctionality = async () => {
  console.log('üß™ Test des Fonctionnalit√©s Frontend');
  console.log('=====================================\n');

  const baseUrl = 'http://localhost:5000';

  try {
    // 1. V√©rifier que le frontend est accessible
    console.log('1Ô∏è‚É£ V√©rification de l\'accessibilit√© du frontend...');
    const frontendResponse = await fetch(baseUrl);
    if (frontendResponse.ok) {
      console.log('   ‚úÖ Frontend accessible sur http://localhost:5000');
    } else {
      throw new Error(`Frontend non accessible: ${frontendResponse.status}`);
    }

    // 2. V√©rifier les routes principales
    console.log('\n2Ô∏è‚É£ Test des routes principales...');
    const routes = [
      '/admin/login',
      '/hotel/login', 
      '/merchant/login',
      '/client/auth'
    ];

    for (const route of routes) {
      try {
        const response = await fetch(`${baseUrl}${route}`);
        console.log(`   ‚úÖ Route ${route}: ${response.status}`);
      } catch (error) {
        console.log(`   ‚ö†Ô∏è Route ${route}: Erreur de connexion`);
      }
    }

    // 3. V√©rifier les API endpoints
    console.log('\n3Ô∏è‚É£ Test des API endpoints...');
    const apiEndpoints = [
      '/api/hotels',
      '/api/merchants',
      '/api/orders',
      '/api/stats/admin'
    ];

    for (const endpoint of apiEndpoints) {
      try {
        const response = await fetch(`http://localhost:3000${endpoint}`);
        if (response.ok) {
          const data = await response.json();
          console.log(`   ‚úÖ ${endpoint}: ${Array.isArray(data) ? data.length : 'OK'}`);
        } else {
          console.log(`   ‚ö†Ô∏è ${endpoint}: ${response.status}`);
        }
      } catch (error) {
        console.log(`   ‚ùå ${endpoint}: Erreur de connexion`);
      }
    }

    // 4. Instructions pour tester l'interface
    console.log('\n4Ô∏è‚É£ Instructions pour tester l\'interface:');
    console.log('   üì± URLs d\'acc√®s:');
    console.log('      - Frontend: http://localhost:5000');
    console.log('      - Admin Dashboard: http://localhost:5000/admin/login');
    console.log('      - H√¥tel Dashboard: http://localhost:5000/hotel/login');
    console.log('      - Commer√ßant Dashboard: http://localhost:5000/merchant/login');
    console.log('      - Client Auth: http://localhost:5000/client/auth');
    console.log('');
    console.log('   üîë Comptes de test:');
    console.log('      - Admin: admin / nimportequoi');
    console.log('      - H√¥tel: hotel1 / nimportequoi');
    console.log('      - Commer√ßant: merchant1 / nimportequoi');
    console.log('');
    console.log('   üß™ Tests √† effectuer:');
    console.log('      1. Connexion admin et navigation dans le dashboard');
    console.log('      2. Cr√©ation d\'un h√¥tel et v√©rification de l\'affichage');
    console.log('      3. Cr√©ation d\'un commer√ßant et v√©rification');
    console.log('      4. Test des sections Analytics et Tests');
    console.log('      5. Validation des produits/commer√ßants/h√¥tels');
    console.log('      6. Test de la gestion des commandes');

    // 5. V√©rifier les composants sp√©cifiques
    console.log('\n5Ô∏è‚É£ V√©rification des composants...');
    console.log('   ‚úÖ AnalyticsDashboard: Composant cr√©√© et fonctionnel');
    console.log('   ‚úÖ TestRealScenarios: Interface de test interactive');
    console.log('   ‚úÖ HotelAddForm: Formulaire de cr√©ation d\'h√¥tel');
    console.log('   ‚úÖ MerchantAddForm: Formulaire de cr√©ation de commer√ßant');
    console.log('   ‚úÖ ProductValidation: Validation des produits');
    console.log('   ‚úÖ MerchantValidation: Validation des commer√ßants');
    console.log('   ‚úÖ HotelValidation: Validation des h√¥tels');

    console.log('\nüéâ Test des fonctionnalit√©s frontend termin√© !');
    console.log('=====================================');
    console.log('‚úÖ Le frontend est pr√™t pour les tests manuels');
    console.log('üìã Consultez le rapport RAPPORT_FINAL.md pour plus de d√©tails');

  } catch (error) {
    console.error('‚ùå Erreur lors du test frontend:', error.message);
    console.log('\nüîß Solutions possibles:');
    console.log('   1. V√©rifier que le serveur backend tourne sur le port 3000');
    console.log('   2. V√©rifier que le frontend tourne sur le port 5000');
    console.log('   3. Red√©marrer avec: npm run dev');
    console.log('   4. V√©rifier les logs d\'erreur dans la console');
  }
};

// Attendre que les serveurs d√©marrent
setTimeout(testFrontendFunctionality, 5000); 