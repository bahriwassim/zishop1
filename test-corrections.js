const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ Test des corrections apport√©es √† Zishop...\n');

// Fonction pour v√©rifier si un fichier existe
function checkFileExists(filePath) {
  return fs.existsSync(filePath);
}

// Fonction pour v√©rifier le contenu d'un fichier
function checkFileContent(filePath, expectedContent) {
  if (!checkFileExists(filePath)) {
    return false;
  }
  const content = fs.readFileSync(filePath, 'utf8');
  return content.includes(expectedContent);
}

// Tests des corrections
const tests = [
  {
    name: 'Service de g√©olocalisation',
    file: 'client/src/services/geolocation.service.ts',
    check: () => checkFileExists('client/src/services/geolocation.service.ts'),
    description: 'V√©rification de la cr√©ation du service de g√©olocalisation'
  },
  {
    name: 'Widget de g√©olocalisation',
    file: 'client/src/components/geolocation-widget.tsx',
    check: () => checkFileExists('client/src/components/geolocation-widget.tsx'),
    description: 'V√©rification de la cr√©ation du widget de g√©olocalisation'
  },
  {
    name: 'Association H√¥tel-Commer√ßants Admin',
    file: 'client/src/components/admin/hotel-merchant-association.tsx',
    check: () => checkFileExists('client/src/components/admin/hotel-merchant-association.tsx'),
    description: 'V√©rification de la cr√©ation du composant d\'association admin'
  },
  {
    name: 'Menu Admin mis √† jour',
    file: 'client/src/components/admin-sidebar.tsx',
    check: () => checkFileContent('client/src/components/admin-sidebar.tsx', 'hotel-merchants'),
    description: 'V√©rification de l\'ajout de la section hotel-merchants dans le menu admin'
  },
  {
    name: 'Dashboard Admin mis √† jour',
    file: 'client/src/pages/admin-dashboard.tsx',
    check: () => checkFileContent('client/src/pages/admin-dashboard.tsx', 'HotelMerchantAssociation'),
    description: 'V√©rification de l\'int√©gration du composant d\'association dans le dashboard admin'
  },
  {
    name: 'Configuration Supabase corrig√©e',
    file: 'shared/supabase.ts',
    check: () => checkFileContent('shared/supabase.ts', 'hotels: \'hotels\''),
    description: 'V√©rification de la correction de la configuration des buckets storage'
  },
  {
    name: 'Composant ImageUpload am√©lior√©',
    file: 'client/src/components/ImageUpload.tsx',
    check: () => checkFileContent('client/src/components/ImageUpload.tsx', 'AlertCircle'),
    description: 'V√©rification de l\'am√©lioration du composant d\'upload d\'images'
  },
  {
    name: 'Dashboard Client avec g√©olocalisation',
    file: 'client/src/pages/client-dashboard.tsx',
    check: () => checkFileContent('client/src/pages/client-dashboard.tsx', 'GeolocationWidget'),
    description: 'V√©rification de l\'int√©gration de la g√©olocalisation dans le dashboard client'
  }
];

// Ex√©cution des tests
let passedTests = 0;
let totalTests = tests.length;

console.log('üìã R√©sultats des tests:\n');

tests.forEach((test, index) => {
  const result = test.check();
  const status = result ? '‚úÖ' : '‚ùå';
  const statusText = result ? 'PASS√â' : '√âCHOU√â';
  
  console.log(`${index + 1}. ${status} ${test.name}`);
  console.log(`   ${test.description}`);
  console.log(`   Fichier: ${test.file}`);
  console.log(`   Statut: ${statusText}\n`);
  
  if (result) passedTests++;
});

// R√©sum√©
console.log('üìä R√©sum√©:');
console.log(`Tests pass√©s: ${passedTests}/${totalTests}`);
console.log(`Taux de r√©ussite: ${Math.round((passedTests / totalTests) * 100)}%`);

if (passedTests === totalTests) {
  console.log('\nüéâ Toutes les corrections ont √©t√© appliqu√©es avec succ√®s!');
} else {
  console.log('\n‚ö†Ô∏è  Certaines corrections n√©cessitent une attention suppl√©mentaire.');
}

// V√©rification des d√©pendances
console.log('\nüîç V√©rification des d√©pendances...');

try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const requiredDeps = ['@supabase/supabase-js', 'lucide-react', 'sonner'];
  
  const missingDeps = requiredDeps.filter(dep => !packageJson.dependencies[dep] && !packageJson.devDependencies[dep]);
  
  if (missingDeps.length > 0) {
    console.log('‚ö†Ô∏è  D√©pendances manquantes:', missingDeps.join(', '));
  } else {
    console.log('‚úÖ Toutes les d√©pendances requises sont pr√©sentes');
  }
} catch (error) {
  console.log('‚ö†Ô∏è  Impossible de v√©rifier les d√©pendances:', error.message);
}

console.log('\nüìù Prochaines √©tapes:');
console.log('1. V√©rifier que Supabase est correctement configur√©');
console.log('2. Tester l\'upload d\'images dans l\'ajout de produits');
console.log('3. Tester la g√©olocalisation dans l\'application mobile');
console.log('4. Tester la gestion des associations h√¥tel-commer√ßants c√¥t√© admin');
console.log('5. V√©rifier que les buckets storage existent dans Supabase'); 