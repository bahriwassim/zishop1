import axios from 'axios';

const BASE_URL = 'http://localhost:5000';

console.log('üîß CORRECTION DES UTILISATEURS EXISTANTS');
console.log('========================================');

async function fixExistingUsers() {
  console.log('\nüìã R√©cup√©ration des utilisateurs existants...');
  
  try {
    const response = await axios.get(`${BASE_URL}/api/users`);
    const users = response.data;
    
    console.log(`üìä ${users.length} utilisateurs trouv√©s`);
    
    // Corriger chaque utilisateur
    for (const user of users) {
      console.log(`\nüîß Correction de l'utilisateur: ${user.username} (ID: ${user.id})`);
      
      // D√©terminer les donn√©es de correction selon le r√¥le
      let updateData = {
        username: user.username,
        role: user.role
      };
      
      // Assigner des entit√©s selon le r√¥le
      if (user.role === "admin") {
        // Admin n'a pas besoin d'entit√©
        updateData.entityId = null;
      } else if (user.role === "hotel") {
        // Assigner le premier h√¥tel disponible
        try {
          const hotelsResponse = await axios.get(`${BASE_URL}/api/hotels`);
          if (hotelsResponse.data.length > 0) {
            updateData.entityId = hotelsResponse.data[0].id;
            console.log(`   ‚úÖ Assign√© √† l'h√¥tel: ${hotelsResponse.data[0].name}`);
          } else {
            console.log(`   ‚ö†Ô∏è Aucun h√¥tel disponible`);
          }
        } catch (error) {
          console.log(`   ‚ùå Erreur lors de la r√©cup√©ration des h√¥tels`);
        }
      } else if (user.role === "merchant") {
        // Assigner le premier commer√ßant disponible
        try {
          const merchantsResponse = await axios.get(`${BASE_URL}/api/merchants`);
          if (merchantsResponse.data.length > 0) {
            updateData.entityId = merchantsResponse.data[0].id;
            console.log(`   ‚úÖ Assign√© au commer√ßant: ${merchantsResponse.data[0].name}`);
          } else {
            console.log(`   ‚ö†Ô∏è Aucun commer√ßant disponible`);
          }
        } catch (error) {
          console.log(`   ‚ùå Erreur lors de la r√©cup√©ration des commer√ßants`);
        }
      }
      
      // Mettre √† jour l'utilisateur
      try {
        const updateResponse = await axios.put(`${BASE_URL}/api/users/${user.id}`, updateData);
        console.log(`   ‚úÖ Utilisateur corrig√© avec succ√®s`);
      } catch (error) {
        console.log(`   ‚ùå Erreur lors de la correction:`, error.response?.data?.message || error.message);
      }
    }
    
    console.log('\nüîÑ V√©rification finale...');
    const finalResponse = await axios.get(`${BASE_URL}/api/users`);
    const finalUsers = finalResponse.data;
    
    console.log(`üìä ${finalUsers.length} utilisateurs apr√®s correction`);
    
    // Afficher les d√©tails finaux
    finalUsers.forEach((user, index) => {
      console.log(`\nüë§ Utilisateur ${index + 1}:`);
      console.log(`   ID: ${user.id}`);
      console.log(`   Username: ${user.username}`);
      console.log(`   Role: ${user.role}`);
      console.log(`   Entity ID: ${user.entity_id || 'null'}`);
      console.log(`   Entity Name: ${user.entityName || 'N/A'}`);
      console.log(`   Entity Description: ${user.entityDescription || 'N/A'}`);
      console.log(`   Created: ${user.created_at || 'N/A'}`);
      console.log(`   Updated: ${user.updated_at || 'N/A'}`);
    });
    
  } catch (error) {
    console.log('‚ùå Erreur lors de la correction:', error.response?.data || error.message);
  }
}

fixExistingUsers().catch(console.error); 